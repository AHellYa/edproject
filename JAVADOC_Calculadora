/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package calculo;
/**
 * <pre>
 * Clase Calculadora
 * 
 * va representar una clase que
 * calcula operaciones básicas de una calculadora
 * (suma,resta,división,multiplicación)
 * incluirá botones de paréntesis para indicar jerarquía de operaciones
 * y el botón +/- que cambia el número de signo
 * </pre>
 * @author Ernesto Palma (176728)
 * @author Javier Martínez (201507)
 * 
 */
public class Calculadora {
    private String expresion;
    private double resul;
/**
 * Constructor sin parámetros
 */    
    public Calculadora(){
/**
 * <pre>
 * Crea una calculadora recibiendo una cadena de texto
 * y la guarda como atributo
 * </pre>
 * @param expresion String 
 * 
 */       
    }
    public Calculadora(String expresion){
        this.expresion = expresion;
    }
/**
 * <pre>
 * método boolean que indica si lo que se ingresa 
 * al instanciar y declarar la calculadora es
 * una cadena de texto correcta y guarda los caracteres (,) en una pila
 * </pre>
 * @return texto boolean  
 * 
 */    
    public boolean texto(){
        boolean respuesta;
        int i=0;
        PilaADT<Character> exp = new PilaA();
        respuesta = true;
        while (i<expresion.length() && respuesta){
            if (expresion.charAt(i) == '(')
                exp.push(expresion.charAt(i)); // mientras encuentre "(" agrega a la pila el caracter
            else
                if (expresion.charAt(i)== ')') // cuando encuentra ")" elimina el caracter "(" y si la pila no es vacía entonces está mal escrito
                    if (exp.isEmpty())
                        respuesta = false;
                    else
                        exp.pop();
            i++;
        }
        return respuesta;
    }
 /**
  * <pre>
  * Método que regresa el cálculo final de las operaciones declaradas en la cadena de texto
  * Si la cadena de texto está bien escrita, entonces convierte la notación a postfija y 
  * realiza el cálculo de operaciones
  * </pre>
  * @return resultado2 String Devuelve un texto con el resultado final
  * @see ConversorPostfija hecha por Javier Marínez 
  * 
  */   
  
    public String resultado2(){
        if (texto()== true){
            return calcula(ConversorPostfija.invertir(ConversorPostfija.convertirAPostfija(expresion)));
           
        }
        return calcula(ConversorPostfija.invertir(ConversorPostfija.convertirAPostfija(expresion)));

    }
/**
 * <pre>
 * Indica si algún símbolo dentro de la cadena
 * se considera como operador ( en esta caso se usan 4: + - * / )
 * </pre>
 * @param dato String pide una cadena de texto para evaluarla
 * @return bolean devuelve si es uno de los 4 caracteres
 * 
 */
    public static boolean esOperador(String dato){
        return dato.equals("+") || dato.equals("-") || dato.equals("*") || dato.equals("/");
    }
 /**
  * <pre>
  * Método que da una respuesta de tipo String en el que calcula las operaciones
  * apoyándose de una pila auxiliar 
  * </pre>
  * @param expresionPostfija pide una pila de tipo String convertida ya 
  * con el método convertirApostfija
  * @return String que indica el resultado de las operaciones
  * 
  */       
    public static String calcula(PilaADT<String> expresionPostfija){
            PilaA<Double> aux = new PilaA();
            while(!expresionPostfija.isEmpty()){ //minetras la pila postfija no está vacía realiza un if
                if(esOperador(expresionPostfija.peek())) // detecta si es algún operador para realizar operacio
                    switch(expresionPostfija.peek().charAt(0)){
                        case '+':
                            aux.push(aux.pop()+aux.pop());
                            break;
                        case '-':
                            aux.push(-aux.pop()+aux.pop());
                            break;
                        case '*':
                            aux.push(aux.pop()*aux.pop());
                            break;
                        case '/':
                            try{
                                aux.push((1/aux.pop())*aux.pop());
                            } catch(Exception e){
                                return "Math Error";
                            }   
                            break;
                    }
                else{
                    if(expresionPostfija.peek().charAt(0) == '~') // se agrega el negativo como número negativo, no como operador
                        aux.push(Double.valueOf(expresionPostfija.peek().substring(1))*(-1));
                    else
                        aux.push(Double.valueOf(expresionPostfija.peek()));
                }
                expresionPostfija.pop();
            }
            return String.valueOf(aux.pop());
        }


}




/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package calculo;
/**
 *
 * @author Javier Martínez del Campo González (201507)

 */
/*
 *  Javier Martínez del Campo González (201507)
 *  Clase con método que toma una expresión matemática correcta a postfija
 */

------------------------------------------------------------------------------------------------------

/**
 *
 * @author javier
 */
import java.util.ArrayList;

/**
 * <pre>
 * Clase ConversorPostfija
 * </pre>
 * Esta clase incluye los métodos necesarios para convertir
 * una expresión matemática de tipo String sintácticamente
 * correcta y covertirla a una expresión postfija acomodada
 * en una pila.
 * @author javier
 * @version 1.0
 */
public class ConversorPostfija {
    
    /**
     * <pre>
     * Método invertir
     * </pre>
     * Este método se utiliza para invertir una pila tipo
     * PilaADT. Se utiliza para enviar la clase que calcula la pila invertida.
     * @param pila La pila tipo PilaADT que se desea invertir.
     * @return Pila tipo PilaA invertirda.
     */
    public static PilaA invertir(PilaADT pila){ 
        PilaA resp = new PilaA();
        while(!pila.isEmpty())
            resp.push(pila.pop());
        return resp;
    }
   
    /**
     * <pre>
     * Método expresionAPila
     * </pre>
     * Este método toma una expresión matemática en String y
     * asigna cada valor, paréntesis u operador a una casilla
     * propia en una pila tipo PilaA. Es auxiliar al método
     * convertirAPostfija.
     * @param expresion La expresión matemática en String.
     * @return Regresa la expresión entrante acomodada en una pila tipo PilaA, con el primer elemento al tope.
     * @see invertir
     */
    public static PilaA expresionAPila(String expresion){
        PilaA <String> aux = new PilaA();
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < expresion.length(); i++)
            switch(expresion.charAt(i)){
                case '+':
                    if(!sb.toString().isBlank())
                        aux.push(sb.toString());
                    sb.setLength(0);
                    aux.push("+");
                    break;
                case '-':
                    if(!sb.toString().isBlank())
                        aux.push(sb.toString());
                    sb.setLength(0);
                    aux.push("-");
                    break;
                case '*':
                    if(!sb.toString().isBlank())
                        aux.push(sb.toString());
                    sb.setLength(0);
                    aux.push("*");
                    break;
                case '/':
                    if(!sb.toString().isBlank())
                        aux.push(sb.toString());
                    sb.setLength(0);
                    aux.push("/");
                    break;
                case '(':
                    if(!sb.toString().isBlank())
                        aux.push(sb.toString());
                    sb.setLength(0);
                    aux.push("(");
                    break;
                case ')':
                    if(!sb.toString().isBlank())
                        aux.push(sb.toString());
                    sb.setLength(0);
                    aux.push(")");
                    break;
                case ' ':
                    break;
                default:
                    sb.append(expresion.charAt(i));
                    break;
            }
        if(!sb.toString().isBlank())
            aux.push(sb.toString());
        //invertir(aux);//regresa la pila invertida para ver los datos del primero al último
        return invertir(aux);
    }
    
    /**
     * <pre>
     * Método convertirAPostfija
     * </pre>
     * Este método convierte una expresión matemática, infija,
     * sintácticamente correcta y de tipo String a una expresión
     * postfija y la acomoda en una pila tipo PilaA.
     * @param expresion La expresión matemática (sintácticamente correcta y en String) a convertir.
     * @return Regresa una pila tipo PilaA con un elemento de la expresión postfija en cada casilla. El tope corresponde al primer elemento de la expresión.
     * @see expresionAPila
     */
    public static PilaA convertirAPostfija(String expresion){
        PilaA<String> exp = expresionAPila(expresion);
        PilaA<String> resp = new PilaA();
        PilaA<String> aux = new PilaA();
        
        while(!exp.isEmpty()){
            switch(exp.peek()){
                case "+":
                    if(!aux.isEmpty()){
                        if(aux.peek().equals("+") || aux.peek().equals("-"))
                            resp.push(aux.pop());
                        else
                            if(aux.peek().equals("*") || aux.peek().equals("/"))
                                while(!aux.isEmpty() && !aux.peek().equals("("))
                                    resp.push(aux.pop());
                    }
                    aux.push("+");
                    break;
                case "-":
                    if(!aux.isEmpty()){
                        if(aux.peek().equals("+") || aux.peek().equals("-"))
                            resp.push(aux.pop());
                        else
                            if(aux.peek().equals("*") || aux.peek().equals("/"))
                                while(!aux.isEmpty() && !aux.peek().equals("("))
                                    resp.push(aux.pop());
                    }
                    aux.push("-");
                    break;
                case "*":
                    if(!aux.isEmpty()){
                        if(aux.peek().equals("*") || aux.peek().equals("/"))
                            resp.push(aux.pop());
                    }
                    aux.push("*");    
                    break;
                case "/":
                    if(!aux.isEmpty()){
                        if(aux.peek().equals("*") || aux.peek().equals("/"))
                            resp.push(aux.pop());
                    }
                    aux.push("/"); 
                    break;
                case "(":
                    aux.push("(");
                    break;
                case ")":
                    while(!aux.peek().equals("("))
                        resp.push(aux.pop());
                    aux.pop();
                    break;
                default:
                    resp.push(exp.peek());
                    break;
            }
            exp.pop();
        }
        while(!aux.isEmpty())
            resp.push(aux.pop());
        return resp;
    }
  

}
